{"version":3,"file":"static/js/464.78794d15.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/shape-image/browser/Utils.js","../node_modules/@tsparticles/shape-image/browser/index.js"],"sourcesContent":["import { errorPrefix, getLogger, getStyleFromHsl } from \"@tsparticles/engine\";\nconst stringStart = 0, defaultOpacity = 1;\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = getStyleFromHsl(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(stringStart, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport async function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", () => {\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", () => {\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            getLogger().error(`${errorPrefix} loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nexport async function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        getLogger().error(`${errorPrefix} Image not found`);\n        image.error = true;\n    }\n    else {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n    const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? defaultOpacity), imageRes = {\n        color,\n        gif: imageData.gif,\n        data: {\n            ...image,\n            svgData: svgColoredData,\n        },\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: imageData.replaceColor,\n        source: imageData.src,\n    };\n    return new Promise((resolve) => {\n        const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", () => {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        const errorHandler = async () => {\n            domUrl.revokeObjectURL(url);\n            const img2 = {\n                ...image,\n                error: false,\n                loading: true,\n            };\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        };\n        img.addEventListener(\"error\", () => void errorHandler());\n        img.src = url;\n    });\n}\n","import { downloadSvgImage, loadImage } from \"./Utils.js\";\nimport { errorPrefix } from \"@tsparticles/engine\";\nconst extLength = 3;\nfunction addLoadImageToEngine(engine) {\n    if (engine.loadImage) {\n        return;\n    }\n    engine.loadImage = async (data) => {\n        if (!data.name && !data.src) {\n            throw new Error(`${errorPrefix} no image source provided`);\n        }\n        if (!engine.images) {\n            engine.images = [];\n        }\n        if (engine.images.find((t) => t.name === data.name || t.source === data.src)) {\n            return;\n        }\n        try {\n            const image = {\n                gif: data.gif ?? false,\n                name: data.name ?? data.src,\n                source: data.src,\n                type: data.src.substring(data.src.length - extLength),\n                error: false,\n                loading: true,\n                replaceColor: data.replaceColor,\n                ratio: data.width && data.height ? data.width / data.height : undefined,\n            };\n            engine.images.push(image);\n            let imageFunc;\n            if (data.gif) {\n                const { loadGifImage } = await import(\"./GifUtils/Utils.js\");\n                imageFunc = loadGifImage;\n            }\n            else {\n                imageFunc = data.replaceColor ? downloadSvgImage : loadImage;\n            }\n            await imageFunc(image);\n        }\n        catch {\n            throw new Error(`${errorPrefix} ${data.name ?? data.src} not found`);\n        }\n    };\n}\nexport async function loadImageShape(engine, refresh = true) {\n    addLoadImageToEngine(engine);\n    const { ImagePreloaderPlugin } = await import(\"./ImagePreloader.js\"), { ImageDrawer } = await import(\"./ImageDrawer.js\");\n    const preloader = new ImagePreloaderPlugin(engine);\n    await engine.addPlugin(preloader, refresh);\n    await engine.addShape([\"image\", \"images\"], new ImageDrawer(engine), refresh);\n}\n"],"names":["stringStart","defaultOpacity","currentColorRegex","async","loadImage","image","Promise","resolve","loading","img","Image","element","addEventListener","undefined","error","getLogger","errorPrefix","source","src","downloadSvgImage","type","response","fetch","ok","svgData","text","replaceImageColor","imageData","color","particle","svgColoredData","imageShape","opacity","colorStyle","getStyleFromHsl","includes","replace","preFillIndex","indexOf","substring","replaceColorSvg","value","imageRes","gif","data","loaded","ratio","width","height","replaceColor","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","revokeObjectURL","img2","errorHandler","extLength","loadImageShape","engine","refresh","name","Error","images","find","t","length","imageFunc","push","loadGifImage","addLoadImageToEngine","ImagePreloaderPlugin","ImageDrawer","preloader","addPlugin","addShape"],"sourceRoot":""}