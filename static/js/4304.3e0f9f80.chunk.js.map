{"version":3,"file":"static/js/4304.3e0f9f80.chunk.js","mappings":"yJAAO,MAAMA,EACTC,WAAAA,GACIC,KAAKC,QAAU,EACnB,CACAC,IAAAA,CAAKC,GACIA,QAGgBC,IAAjBD,EAAKF,UACLD,KAAKC,QAAUE,EAAKF,QAE5B,ECVG,MAAMI,EACTN,WAAAA,GACIC,KAAKM,SAAW,GAChBN,KAAKO,MAAQ,IAAIT,EACjBE,KAAKQ,OAAS,EAClB,CACAN,IAAAA,CAAKC,GACIA,SAGiBC,IAAlBD,EAAKG,WACLN,KAAKM,SAAWH,EAAKG,UAEzBN,KAAKO,MAAML,KAAKC,EAAKI,YACDH,IAAhBD,EAAKK,SACLR,KAAKQ,OAASL,EAAKK,QAE3B,ECjBJ,MAAMC,EAAc,EAAGC,EAAc,EAkB9B,SAASC,EAAUC,EAAWC,EAAKC,EAAIC,GAC1C,MAAyCC,EAAzBJ,EAAUK,cAAwCC,cAAcC,MAAMC,QACtF,GAAKJ,EAGL,OAtBG,SAAkBK,EAASP,EAAIC,EAAId,GACtC,MAAMqB,EAAWC,KAAKC,MAAMT,EAAGU,YAAcX,EAAGW,aAAcC,EAASZ,EAAGa,eAAgBC,EAASb,EAAGY,eACtG,IAAKD,IAAWE,EACZ,OAEJ,MAAMC,EAAYf,EAAGgB,cAAeC,EAAUhB,EAAGe,cAAeE,GAASC,EAAAA,EAAAA,IAASP,EAAQE,EAAQd,EAAGW,YAAaV,EAAGU,aAAcS,EAAOb,EAAQc,qBAAqBN,EAAUO,EAAGP,EAAUQ,EAAGN,EAAQK,EAAGL,EAAQM,GAIpN,OAHAH,EAAKI,aAAa7B,GAAa8B,EAAAA,EAAAA,IAAgBb,EAAQzB,IACvDiC,EAAKI,cAAaE,EAAAA,EAAAA,IAAMlB,EAAUb,EAAaC,IAAc+B,EAAAA,EAAAA,IAAgBT,EAAQ/B,IACrFiC,EAAKI,aAAa5B,GAAa6B,EAAAA,EAAAA,IAAgBX,EAAQ3B,IAChDiC,CACX,CAYWQ,CAAS7B,EAAKC,EAAIC,EAAIC,EAAeT,MAAMN,QACtD,CACO,SAAS0C,EAAe/B,EAAWE,EAAIC,GAC1CH,EAAUgC,OAAOC,MAAMhC,IACnB,MAAMiC,EAAKnC,EAAUC,EAAWC,EAAKC,EAAIC,GACzC,IAAK+B,EACD,OAEJ,MAAMC,EAAOjC,EAAGgB,cAAekB,EAAOjC,EAAGe,eAnB1C,SAAyBT,EAAS4B,EAAOtC,EAAWuC,EAAOC,IAC9DC,EAAAA,EAAAA,IAAS/B,EAAS6B,EAAOC,GACzB9B,EAAQgC,UAAYJ,EACpB5B,EAAQiC,YAAc3C,EACtBU,EAAQkC,QACZ,CAeQC,CAAgB3C,EAAKC,EAAG2C,OAAOC,YAhCqB,EAgCYZ,EAAIC,EAAMC,EAAK,GAEvF,CC/BO,MAAMW,UAAkBC,EAAAA,GAC3B7D,WAAAA,CAAYa,GACRiD,MAAMjD,EACV,CACAkD,KAAAA,GACA,CACAC,IAAAA,GACI,MAAMnD,EAAYZ,KAAKY,UAAWQ,EAAUR,EAAUK,cAAcC,cAAcC,MAAMC,QACnFA,IAGLR,EAAU6C,OAAOO,oBAAsB5C,EAAQd,SAAWM,EAAU6C,OAAOQ,WAC3ErD,EAAU6C,OAAOS,kBAAoB9C,EAAQZ,OAASI,EAAU6C,OAAOQ,WAC3E,CACAE,QAAAA,GACI,MAAMvD,EAAYZ,KAAKY,UACvB,GAD4CA,EAAUK,cAC1CC,cAAckD,OAAOC,QAAQC,QAA6C,gBAAnC1D,EAAUM,cAAcqD,OAA0B,CACjG,MAAMC,EAAW5D,EAAUM,cAAcuD,MAAMC,UAAU,oBAAEV,EAAmB,kBAAEE,GAAsBtD,EAAU6C,OAChH,IAAKO,GACDA,EApB6B,IAqB5BE,GACDA,EAtB6B,IAuB5BM,EACD,OAEJ,MAAMlE,EAAWiB,KAAKoD,IAAIT,GAAoBU,EAAQhE,EAAUiE,UAAUC,SAASC,YAAYP,EAAUlE,GAAW0E,GAAMhF,KAAKiF,UAAUD,KACzIJ,EAAMM,SAAQ,CAACpE,EAAIqE,KACf,MAAMpC,EAAOjC,EAAGgB,cAChB,IAAK,MAAMf,KAAM6D,EAAMQ,MAAMD,EADgB,GACE,CAC3C,MAAMnC,EAAOjC,EAAGe,cAAeuD,EAAU9D,KAAKoD,IAAIX,GAAsBsB,EAAQ/D,KAAKoD,IAAI5B,EAAKX,EAAIY,EAAKZ,GAAImD,EAAQhE,KAAKoD,IAAI5B,EAAKV,EAAIW,EAAKX,GACtIiD,EAAQD,GAAWE,EAAQF,GAC3B1C,EAAe/B,EAAWE,EAAIC,EAEtC,IAER,CACJ,CACAkE,SAAAA,CAAUO,GACN,MAAM5E,EAAYZ,KAAKY,UAAW6D,EAAQ7D,EAAUM,cAAcuD,MAAOL,GAAUoB,GAAUtE,eAAiBN,EAAUK,cAAcC,eAAekD,OACrJ,SAAMA,EAAOC,QAAQC,SAAUG,EAAMC,YAG9Be,EAAAA,EAAAA,IA3CK,UA2CkBrB,EAAOC,QAAQqB,KACjD,CACAC,eAAAA,CAAgBC,KAAYC,GACnBD,EAAQxE,UACTwE,EAAQxE,QAAU,IAAIf,GAE1B,IAAK,MAAMyF,KAAUD,EACjBD,EAAQxE,QAAQlB,KAAK4F,GAAQ1E,QAErC,CACA2E,KAAAA,GACA,E","sources":["../node_modules/@tsparticles/interaction-external-connect/browser/Options/Classes/ConnectLinks.js","../node_modules/@tsparticles/interaction-external-connect/browser/Options/Classes/Connect.js","../node_modules/@tsparticles/interaction-external-connect/browser/Utils.js","../node_modules/@tsparticles/interaction-external-connect/browser/Connector.js"],"sourcesContent":["export class ConnectLinks {\n    constructor() {\n        this.opacity = 0.5;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n","import { ConnectLinks } from \"./ConnectLinks.js\";\nexport class Connect {\n    constructor() {\n        this.distance = 80;\n        this.links = new ConnectLinks();\n        this.radius = 60;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        this.links.load(data.links);\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n","import { clamp, colorMix, drawLine, getStyleFromHsl, getStyleFromRgb, } from \"@tsparticles/engine\";\nconst gradientMin = 0, gradientMax = 1, defaultLinksWidth = 0;\nexport function gradient(context, p1, p2, opacity) {\n    const gradStop = Math.floor(p2.getRadius() / p1.getRadius()), color1 = p1.getFillColor(), color2 = p2.getFillColor();\n    if (!color1 || !color2) {\n        return;\n    }\n    const sourcePos = p1.getPosition(), destPos = p2.getPosition(), midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()), grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(gradientMin, getStyleFromHsl(color1, opacity));\n    grad.addColorStop(clamp(gradStop, gradientMin, gradientMax), getStyleFromRgb(midRgb, opacity));\n    grad.addColorStop(gradientMax, getStyleFromHsl(color2, opacity));\n    return grad;\n}\nexport function drawConnectLine(context, width, lineStyle, begin, end) {\n    drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n}\nexport function lineStyle(container, ctx, p1, p2) {\n    const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;\n    if (!connectOptions) {\n        return;\n    }\n    return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\nexport function drawConnection(container, p1, p2) {\n    container.canvas.draw((ctx) => {\n        const ls = lineStyle(container, ctx, p1, p2);\n        if (!ls) {\n            return;\n        }\n        const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        drawConnectLine(ctx, p1.retina.linksWidth ?? defaultLinksWidth, ls, pos1, pos2);\n    });\n}\n","import { ExternalInteractorBase, isInArray, } from \"@tsparticles/engine\";\nimport { Connect } from \"./Options/Classes/Connect.js\";\nimport { drawConnection } from \"./Utils.js\";\nconst connectMode = \"connect\", minDistance = 0;\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;\n        if (!connect) {\n            return;\n        }\n        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n            const mousePos = container.interactivity.mouse.position, { connectModeDistance, connectModeRadius } = container.retina;\n            if (!connectModeDistance ||\n                connectModeDistance < minDistance ||\n                !connectModeRadius ||\n                connectModeRadius < minDistance ||\n                !mousePos) {\n                return;\n            }\n            const distance = Math.abs(connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            query.forEach((p1, i) => {\n                const pos1 = p1.getPosition(), indexOffset = 1;\n                for (const p2 of query.slice(i + indexOffset)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        drawConnection(container, p1, p2);\n                    }\n                }\n            });\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(connectMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.connect) {\n            options.connect = new Connect();\n        }\n        for (const source of sources) {\n            options.connect.load(source?.connect);\n        }\n    }\n    reset() {\n    }\n}\n"],"names":["ConnectLinks","constructor","this","opacity","load","data","undefined","Connect","distance","links","radius","gradientMin","gradientMax","lineStyle","container","ctx","p1","p2","connectOptions","actualOptions","interactivity","modes","connect","context","gradStop","Math","floor","getRadius","color1","getFillColor","color2","sourcePos","getPosition","destPos","midRgb","colorMix","grad","createLinearGradient","x","y","addColorStop","getStyleFromHsl","clamp","getStyleFromRgb","gradient","drawConnection","canvas","draw","ls","pos1","pos2","width","begin","end","drawLine","lineWidth","strokeStyle","stroke","drawConnectLine","retina","linksWidth","Connector","ExternalInteractorBase","super","clear","init","connectModeDistance","pixelRatio","connectModeRadius","interact","events","onHover","enable","status","mousePos","mouse","position","abs","query","particles","quadTree","queryCircle","p","isEnabled","forEach","i","slice","distMax","xDiff","yDiff","particle","isInArray","mode","loadModeOptions","options","sources","source","reset"],"sourceRoot":""}