{"version":3,"file":"static/js/6198.9677d0ea.chunk.js","mappings":"iKAQO,SAASA,EAASC,EAAWC,EAAUC,EAAWC,EAASC,GAC9DJ,EAAUK,OAAOC,MAAMC,IACnB,MAAMC,EAAWP,EAASQ,eAR3B,SAAsBC,EAASC,EAAOC,EAAOC,EAAKC,EAAWX,IAChEY,EAAAA,EAAAA,IAASL,EAASE,EAAOC,GACzBH,EAAQM,aAAcC,EAAAA,EAAAA,IAAgBH,EAAWX,GACjDO,EAAQQ,UAAYP,EACpBD,EAAQS,QACZ,CAIQC,CAAab,EAAKN,EAASoB,OAAOC,YAVrB,EAUiDd,EAAUJ,EAAUF,EAAWC,EAAQ,GAE7G,CCTO,MAAMoB,UAAgBC,EAAAA,GACzBC,WAAAA,CAAYzB,GACR0B,MAAM1B,EACV,CACA2B,KAAAA,GACA,CACAC,IAAAA,GACI,MAAM5B,EAAY6B,KAAK7B,UAAW8B,EAAO9B,EAAU+B,cAAcC,cAAcC,MAAMH,KAChFA,IAGL9B,EAAUqB,OAAOa,iBAAmBJ,EAAKK,SAAWnC,EAAUqB,OAAOe,WACzE,CACAC,QAAAA,GACI,MAAMrC,EAAY6B,KAAK7B,UAA8CgC,EAAzBhC,EAAU+B,cAAuCC,cAC7F,IAAKA,EAAcC,MAAMH,OACpBE,EAAcM,OAAOC,QAAQC,QAC9BxC,EAAUgC,cAAcS,SAAWC,EAAAA,GACnC,OAEJ,MAAMtC,EAAWJ,EAAUgC,cAAcW,MAAMC,SAC/C,IAAKxC,EACD,OAEJ,MAAM+B,EAAWnC,EAAUqB,OAAOa,iBAClC,IAAKC,GAAYA,EA1Bc,EA2B3B,OAEJ,MAAMU,EAAQ7C,EAAU8C,UAAUC,SAASC,YAAY5C,EAAU+B,GAAWc,GAAMpB,KAAKqB,UAAUD,KACjG,IAAK,MAAMhD,KAAY4C,EAAO,CAC1B,MAAMM,EAAMlD,EAASQ,cAAe2C,GAAgBC,EAAAA,EAAAA,IAAYF,EAAK/C,GACrE,GAAIgD,EAAgBjB,EAChB,SAEJ,MAAMmB,EAAkBtB,EAAcC,MAAMH,KAAKyB,MAAOC,EAAcF,EAAgBnD,QAASsD,EAAcD,EAAeJ,EAAgBI,EAAerB,EAC3J,GAAIsB,GApCuC,EAqCvC,SAEJ,MAAMC,EAAWJ,EAAgBK,OAAS1D,EAAS2D,QAAQL,OAAOI,MAClE,IAAK3D,EAAU8C,UAAUe,eAAiBH,EAAU,CAChD,MAAMI,EAAe9B,EAAcC,MAAMH,KAAKyB,MAC9CvD,EAAU8C,UAAUe,eAAgBE,EAAAA,EAAAA,IAAmBL,EAAUI,EAAaE,MAAOF,EAAaG,QACtG,CACA,MAAMnD,GAAYoD,EAAAA,EAAAA,IAAajE,OAAUkE,EAAWnE,EAAU8C,UAAUe,eACnE/C,GAGLf,EAASC,EAAWC,EAAUa,EAAW2C,EAAarD,EAC1D,CACJ,CACA8C,SAAAA,CAAUjD,GACN,MAAMD,EAAY6B,KAAK7B,UAAW2C,EAAQ3C,EAAUgC,cAAcW,MAAOL,GAAUrC,GAAU+B,eAAiBhC,EAAU+B,cAAcC,eAAeM,OACrJ,OAAOA,EAAOC,QAAQC,UAAYG,EAAMC,WAAYwB,EAAAA,EAAAA,IArD3C,OAqD+D9B,EAAOC,QAAQ8B,KAC3F,CACAC,eAAAA,CAAgBV,KAAYW,GACnBX,EAAQ9B,OACT8B,EAAQ9B,KAAO,IAAI0C,EAAAA,GAEvB,IAAK,MAAMC,KAAUF,EACjBX,EAAQ9B,KAAK4C,KAAKD,GAAQ3C,KAElC,CACA6C,KAAAA,GACA,E","sources":["../node_modules/@tsparticles/interaction-external-grab/browser/Utils.js","../node_modules/@tsparticles/interaction-external-grab/browser/Grabber.js"],"sourcesContent":["import { drawLine, getStyleFromRgb } from \"@tsparticles/engine\";\nconst defaultWidth = 0;\nexport function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n    drawLine(context, begin, end);\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n}\nexport function drawGrab(container, particle, lineColor, opacity, mousePos) {\n    container.canvas.draw((ctx) => {\n        const beginPos = particle.getPosition();\n        drawGrabLine(ctx, particle.retina.linksWidth ?? defaultWidth, beginPos, mousePos, lineColor, opacity);\n    });\n}\n","import { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent, } from \"@tsparticles/engine\";\nimport { Grab } from \"./Options/Classes/Grab.js\";\nimport { drawGrab } from \"./Utils.js\";\nconst grabMode = \"grab\", minDistance = 0, minOpacity = 0;\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, grab = container.actualOptions.interactivity.modes.grab;\n        if (!grab) {\n            return;\n        }\n        container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.modes.grab ||\n            !interactivity.events.onHover.enable ||\n            container.interactivity.status !== mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance;\n        if (!distance || distance < minDistance) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= minOpacity) {\n                continue;\n            }\n            const optColor = grabLineOptions.color ?? particle.options.links?.color;\n            if (!container.particles.grabLineColor && optColor) {\n                const linksOptions = interactivity.modes.grab.links;\n                container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                continue;\n            }\n            drawGrab(container, particle, colorLine, opacityLine, mousePos);\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(grabMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.grab) {\n            options.grab = new Grab();\n        }\n        for (const source of sources) {\n            options.grab.load(source?.grab);\n        }\n    }\n    reset() {\n    }\n}\n"],"names":["drawGrab","container","particle","lineColor","opacity","mousePos","canvas","draw","ctx","beginPos","getPosition","context","width","begin","end","colorLine","drawLine","strokeStyle","getStyleFromRgb","lineWidth","stroke","drawGrabLine","retina","linksWidth","Grabber","ExternalInteractorBase","constructor","super","clear","init","this","grab","actualOptions","interactivity","modes","grabModeDistance","distance","pixelRatio","interact","events","onHover","enable","status","mouseMoveEvent","mouse","position","query","particles","quadTree","queryCircle","p","isEnabled","pos","pointDistance","getDistance","grabLineOptions","links","lineOpacity","opacityLine","optColor","color","options","grabLineColor","linksOptions","getLinkRandomColor","blink","consent","getLinkColor","undefined","isInArray","mode","loadModeOptions","sources","Grab","source","load","reset"],"sourceRoot":""}